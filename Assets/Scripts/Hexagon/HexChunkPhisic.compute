// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalcForces, CalcHeights;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Hex
{
    float StartHeight;
    float SpringRate;
    float Mass;
    float Friction—oefficient;
};

StructuredBuffer<Hex> Hexes;

RWStructuredBuffer<float> Heights; // + 2
RWStructuredBuffer<float> Forces;

uint ChunkSize;
float Graviti;



float3x3 WeightMatrix =
{
    0f, 1f, 1f,
    1f, 1f, 1f,
    1f, 1f, 0f
};

[numthreads(8,8,1)]
void CalcForces(uint3 id : SV_DispatchThreadID)
{
    uint fId = id.x * ChunkSize + id.y;
    uint hId = fId + ChunkSize + 3 + id.x * 2;
    float forces = Forces[fId];
    float hex = Hexes[fId];
    
    for (uint i = -1; i <= 1; i++)
    {
        for (uint j = -1; j <= 1; j++)
        {
            uint lHId = hId + i * (ChunkSize + 2) + j;
            
            forces += (hex.StartHeight - Height[lHId]) * hex.SpringRate * WeightMatrix[i+1, j+1];
        }
    }
    
    forces += Graviti * hex.Mass;
    Forces[fId] = forces;
}
